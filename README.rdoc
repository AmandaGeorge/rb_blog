== Steps to Create This Ruby App

### In Terminal
- rails new rb_blog -d postgresql -T
- rb_blog
- rake db:create
- rails g controller pages index show
- rails g controller posts
- rails g controller users
- rails g controller sessions new create destroy
- subl .

### In config/routes.rb
- root 'posts#index'
- made changes to provided routes:
	- get '/about', to: 'pages#show'
	- get '/login', to: 'sessions#new'
	- get '/logout', to: 'sessions#destroy'
- resources :posts, except: [:index]
- resources :sessions, only: [:create]
- resources :users

### In Terminal
- rake routes | pbcopy

### In config/routes.rb
- paste routes at the bottom and comment them out

### In Terminal
- open a second tab
- rails s 
* open localhost:3000 in browser to see if it works

### In app/views/posts/index.html
- add content and templates:
	<h1>Blog Posts</h1>

	<%= link_to "Add New Post", new_post_path %>

	<% @posts.each do |p| %>
		<h3><%= p.title %></h3>
		<br>
		<p><%= p.content %></p>
	<% end %>

### In app/controllers/posts_controller.rb
- define @posts for the index method
	def index
		@posts = Post.all
	end
* localhost in browser says "uninitialized constant PostsController::Post" so need to make the Post model

### In Terminal
- rails g model Post title content
- rake db:migrate
* now it works in localhost

### In app/views/posts
- create new.html.erb file
- make a new post form:
	<h1>Write a New Post</h1>
	<%= form_for @post do |f| %>
		<%= f.text_field :title, placeholder: "Title" %>
		<br>
		<%= f.text_field :content, placeholder: "Write your post here." %>
		<br>
		<%= f.submit "Submit Post" %>
	<% end %>

### In app/controllers/posts_controller.rb
- define @post for the new method
	def new
		@posts = Post.new
	end
	
### In app/views/posts
- create show.html.erb file
- add template to show the post just created
	<%= link_to "Home", root_path %>
	<hr>
	<h1><%= @post.title %></h1>
	<hr>
	<p><%= @post.content %></p>

### In app/controllers/posts_controller.rb
- define @post for the show method
	def show
		@posts = Post.new
	end

### In app/views/users
- create new.html.erb file
- make a new user form:
	<%= link_to "Home", root_path %>
	<hr>
	<h1>Sign Up</h1>
		<%= form_for @user do |f| %>
			<%= f.text_field :first_name, placeholder: "First Name" %>
			<br>
			<%= f.text_field :last_name, placeholder: "Last Name" %>
			<br>
			<%= f.email_field :email, placeholder: "Email" %>
			<br>
			<%= f.password_field :password, placeholder: "Password" %>
			<br>
			<%= f.password_field :password_confirmation, placeholder: "Confirm password" %>
			<br>
			<%= f.submit "Submit", class: "btn btn-primary" %>
		<% end %>

### In app/views/posts/index.html.erb
- Add sign up link
	<%= link_to "Sign Up", signup_path %>

### In app/controllers/users_controller.rb
- define @users for the new method
	def new
		@user = User.new
	end
* localhost in browser says "uninitialized constant UsersController::User" so need to make the User model

### In Terminal
- rails g model User first_name last_name email password_digest
- rake db:migrate
* now it works in localhost

### In app/models/user.rb
- add has_secure_password

### In the Gemfile
- comment in the bcrypt gem

### In Terminal
- sudo gem install bcrypt
- bundle
- restart the rails server

### In app/controllers/users_controller.rb
- define @users for the create method
	def create
		@user = User.new(user_params)
		if @user.save
			redirect_to profile_path
		else
			redirect_to signup_path
		end
	end
- define user_params in a private method
	private
		def user_params
			params.require(:user).permit(:first_name, :last_name, :email, :password, :password_confirmation)
		end
- define show method
	def show
		@user = User.find(params[:id])
	end

### In config/routes.rb
- update user routes:
	get '/profile', to: 'users#show'
	get '/signup', to: 'users#new'
	resources :users, except: [:show, :new]

### In app/views/users
- create show.html.erb file
- add content

### In app/controllers/application_controller.rb
- add current user method
	def current_user
	    @current_user ||= User.find(session[:user_id]) if session[:user_id]
	end
- add helper method
	helper_method :current_user
- add authorize method
	def authorize
	    unless current_user
	      redirect_to login_path
	    end
	end

### ### In app/views/posts/index.html.erb
- add Login link
	<%= link_to "Login", login_path %>

### ### In app/views/sessions/new.html.erb
- add login form
	<%= link_to "Home", root_path %>
	<hr>
	<h1>Login</h1>
		<%= form_for :user, url: sessions_path do |f| %>
			<%= f.email_field :email, placeholder: "Email" %>
			<br>
			<%= f.password_field :password, placeholder: "Password" %>
			<br>
			<%= f.submit "Submit", class: "btn btn-primary" %>
		<% end %>

### In app/controllers/sessions_controller.rb
- add new instance method
	def new
		if current_user
			redirect_to profile_path
		else
			render :new
		end
	end
- add user_params method
	private
		def user_params
			params.require(:user).permit(:email, :password)
		end
- add create method
	def create
		user = User.find_by_email(user_params[:email])
		if user && user.authenticate(user_params[:password])
			session[:user_id] = user.id
			redirect_to profile_path
		else
			redirect_to login_path
		end
	end

### In app/views/users
- add Logout link
	<%= link_to "Logout", logout_path %>
	<hr>

### In app/views/posts/index
- add Logout link
	<%= link_to "Logout", logout_path %>

### In app/controllers/sessions_controller.rb
- add destroy instance method
	def destroy
		session[:user_id] = nil
		redirect_to root_path
	end

### In user model
- add validations
	validates :password, 
		presence: true,
		length: { minimum: 6 }

	validates :email,
		presence: true,
		uniqueness: true,

		format: {
			with: /@/,
			message: "Please enter a valid email"
		}

### In post model
- add validations
	validates :title, 
		presence: true

	validates :content,
		presence: true

### Add relationship between users and posts
- add to user model:
	has_many :posts, dependent: :destroy
- add to post model:
	belongs_to :user

### In Terminal
- rails g migration AddUserIdToPosts
- rake db:migrate

### In new migration file
- add this in the change method
	change_table :posts do |t|
		t.references :owner
	end

### Add content to pages show view, including Home link

### Add about link to posts index view

### Make an edit posts view
	<h1>Edit Post</h1>

	<%= form_for @post do |f| %>
		<%= f.text_field :title, placeholder: "Title" %>
		<br>
		<%= f.text_field :content, placeholder: "Content" %>
		<br>
		<%= f.submit "Save Post" %>
	<% end %>

### Add edit link to show view

### Add edit method to PostsController
	def edit
		@post = Post.find(params[:id])
		if current_user.posts.include? @post
			render :edit
		else
			redirect_to profile_path
		end
	end























